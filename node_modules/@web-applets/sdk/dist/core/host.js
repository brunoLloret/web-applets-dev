var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Applet_manifest, _Applet_data;
import { AppletMessage, AppletDataMessage, AppletInitMessage, AppletDataEvent, AppletResizeEvent, AppletActionsEvent, AppletMessageRelay, } from './shared';
import { parseUrl } from '../lib/utils';
// Container for initializing applets without an explicit container
const hiddenContainer = document.createElement('iframe');
hiddenContainer.style.display = 'none';
document.body.appendChild(hiddenContainer);
const defaultOpts = {
    unsafe: false,
};
// Load an applet object from a URL
async function load(url, container, opts) {
    const _opts = Object.assign(defaultOpts, opts ?? {});
    if (!container)
        container = hiddenContainer;
    url = parseUrl(url);
    const manifest = await loadManifest(`${url}`);
    // If unsafe enabled, allow same origin sandbox
    // This is required for e.g. YouTube embeds
    if (_opts.unsafe && manifest.unsafe) {
        container.setAttribute('sandbox', 'allow-scripts allow-forms allow-same-origin');
    }
    else {
        container.setAttribute('sandbox', 'allow-scripts allow-forms');
    }
    // Load the applet
    const applet = new Applet({
        manifest,
        container,
    });
    return new Promise((resolve) => {
        applet.messageRelay.on('ready', () => {
            resolve(applet);
        });
    });
}
class Applet extends EventTarget {
    constructor(options) {
        super();
        this.actions = [];
        _Applet_manifest.set(this, void 0);
        this.type = 'host';
        _Applet_data.set(this, void 0);
        this.container = options.container;
        this.container.src = options.manifest.start_url;
        this.messageRelay = new AppletMessageRelay(this.container.contentWindow);
        __classPrivateFieldSet(this, _Applet_manifest, options.manifest, "f");
        this.initializeListeners();
        this.messageRelay.on('ready', () => {
            this.messageRelay.send(new AppletInitMessage({ manifest: options.manifest }));
        });
    }
    initializeListeners() {
        this.messageRelay.on('data', (message) => {
            __classPrivateFieldSet(this, _Applet_data, message.data, "f");
            const dataEvent = new AppletDataEvent({ data: message.data });
            if (typeof this.ondata === 'function')
                this.ondata(dataEvent);
            this.dispatchEvent(dataEvent);
        });
        this.messageRelay.on('resize', (message) => {
            const resizeEvent = new AppletResizeEvent({
                dimensions: message.dimensions,
            });
            if (typeof this.onresize === 'function')
                this.onresize(resizeEvent);
            this.dispatchEvent(resizeEvent);
        });
        this.messageRelay.on('actions', (message) => {
            this.actions = message.actions;
            const actionsEvent = new AppletActionsEvent({ actions: message.actions });
            if (typeof this.onactions === 'function')
                this.onactions(actionsEvent);
            this.dispatchEvent(actionsEvent);
        });
    }
    get data() {
        return __classPrivateFieldGet(this, _Applet_data, "f");
    }
    set data(data) {
        __classPrivateFieldSet(this, _Applet_data, data, "f");
        this.messageRelay.send(new AppletDataMessage({ data }));
    }
    get manifest() {
        return __classPrivateFieldGet(this, _Applet_manifest, "f");
    }
    onresize(event) { }
    onactions(event) { }
    ondata(event) { }
    disconnect() {
        this.container.src = 'about:blank';
    }
    async dispatchAction(actionId, params) {
        const actionMessage = new AppletMessage('action', {
            actionId,
            params,
        });
        return await this.messageRelay.send(actionMessage);
    }
}
_Applet_manifest = new WeakMap(), _Applet_data = new WeakMap();
// Loads a manifest and parses the JSON
async function loadManifest(baseUrl) {
    baseUrl = parseUrl(baseUrl);
    let manifest;
    try {
        const request = await fetch(`${baseUrl}/manifest.json`);
        manifest = await request.json();
        // TODO: Add verification this is a valid manifest
    }
    catch (e) {
        console.error(e.message);
    }
    manifest.start_url = manifest.start_url
        ? parseUrl(manifest.start_url, baseUrl)
        : baseUrl;
    return manifest;
}
// Exports
export const applets = {
    load,
};
export { Applet };

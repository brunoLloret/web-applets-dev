export interface AppletManifest {
    name?: string;
    short_name?: string;
    icons: AppletIcons;
    description?: string;
    icon?: string;
    display?: string;
    start_url?: string;
    unsafe?: boolean;
    actions?: AppletAction[];
}
export interface AppletIcons {
    src: string;
    purpose?: string;
    sizes?: string;
    type?: string;
}
export interface AppletAction {
    id: string;
    name?: string;
    description?: string;
    params?: JSONSchemaProperties;
}
export type JSONSchemaProperties = Record<string, {
    type: string;
    description?: string;
    properties?: JSONSchemaProperties;
}>;
export type ActionParams = Record<string, any>;
export declare function loadManifest(pageUrl: string): Promise<AppletManifest>;
interface SendMessageOptions {
    resolves: boolean;
}
export declare class AppletMessageRelay {
    target: Window;
    constructor(target: Window);
    send(message: AppletMessage, options?: SendMessageOptions): Promise<AppletMessage>;
    on(messageType: AppletMessageType, callback: AppletMessageCallback): Promise<void>;
}
export declare class AppletMessage {
    type: AppletMessageType;
    id: string;
    timeStamp: number;
    [key: string]: any;
    constructor(type: AppletMessageType, values?: {
        [key: string]: any;
    });
    toJson(): {
        [k: string]: any;
    };
}
export declare class AppletResolveMessage extends AppletMessage {
    messageId: string;
    constructor({ id }: {
        id: string;
    });
}
export declare class AppletActionsMessage extends AppletMessage {
    actions: AppletAction[];
    constructor({ actions }: {
        actions: AppletAction[];
    });
}
export declare class AppletDataMessage<T = any> extends AppletMessage {
    data: T;
    constructor({ data }: {
        data: T;
    });
}
export declare class AppletReadyMessage extends AppletMessage {
    constructor();
}
export declare class AppletResizeMessage extends AppletMessage {
    dimensions: {
        height: number;
        width: number;
    };
    constructor({ dimensions, }: {
        dimensions: AppletResizeMessage['dimensions'];
    });
}
interface AppletActionMessageOptions {
    actionId: string;
    params: any;
}
export declare class AppletActionMessage extends AppletMessage {
    actionId: string;
    params: any;
    constructor({ actionId, params }: AppletActionMessageOptions);
}
export declare class AppletInitMessage extends AppletMessage {
    constructor();
}
export type AppletMessageType = 'action' | 'actions' | 'data' | 'init' | 'ready' | 'resolve' | 'resize';
export type AppletMessageCallback = (message: AppletMessage) => Promise<void> | void;
export declare class AppletDataEvent extends Event {
    data: any;
    constructor({ data }: {
        data: any;
    });
}
export declare class AppletReadyEvent extends Event {
    constructor();
}
export declare class AppletLoadEvent extends Event {
    constructor();
}
export declare class AppletActionsEvent extends Event {
    actions: AppletAction[];
    constructor({ actions }: {
        actions: AppletAction[];
    });
}
export interface AppletResizeEventOpts {
    dimensions: AppletResizeMessage['dimensions'];
}
export declare class AppletResizeEvent extends Event {
    dimensions: AppletResizeMessage['dimensions'];
    constructor({ dimensions }: AppletResizeEventOpts);
}
export {};

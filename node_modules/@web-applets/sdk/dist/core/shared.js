/* Manifest & action definitions */
import { parseUrl } from '../utils';
export async function loadManifest(pageUrl) {
    pageUrl = parseUrl(pageUrl);
    let manifest;
    try {
        const pageRequest = await fetch(pageUrl);
        const html = await pageRequest.text();
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        const linkElem = doc.querySelector('link[rel="manifest"]');
        const manifestUrl = parseUrl(linkElem.href);
        const manifestRequest = await fetch(manifestUrl);
        manifest = await manifestRequest.json();
        // TODO: Add verification this is a valid manifest
    }
    catch (e) {
        return;
    }
    return manifest;
}
export class AppletMessageRelay {
    constructor(target) {
        this.target = target;
    }
    async send(message, options) {
        this.target.postMessage(message.toJson(), '*');
        if (options && options.resolves === false)
            return;
        // Wait for a resolve message to be sent back before completing await
        return new Promise((resolve) => {
            const listener = (messageEvent) => {
                const responseMessage = new AppletMessage(messageEvent.data.type, messageEvent.data);
                if (responseMessage.type === 'resolve' &&
                    responseMessage.id === message.id) {
                    window.removeEventListener('message', listener);
                    resolve(responseMessage);
                }
            };
            window.addEventListener('message', listener);
        });
    }
    async on(messageType, callback) {
        const listener = async (messageEvent) => {
            if (messageEvent.source === window.self)
                return;
            if (messageEvent.data.type !== messageType)
                return;
            const message = new AppletMessage(messageEvent.data.type, messageEvent.data);
            // Wait for the callback to complete, then send a 'resolve' event
            // with the message ID.
            await callback(message);
            const resolveMessage = new AppletResolveMessage({ id: message.id });
            this.send(resolveMessage, { resolves: false });
        };
        window.addEventListener('message', listener);
        // TODO: Return something that I can then call .off or .removeListener, implement the
        // rest of that event class
    }
}
/* Messages */
export class AppletMessage {
    constructor(type, values) {
        this.timeStamp = Date.now();
        this.type = type;
        this.id = crypto.randomUUID();
        if (values)
            Object.assign(this, values);
    }
    toJson() {
        return Object.fromEntries(Object.entries(this).filter(([_, value]) => {
            try {
                JSON.stringify(value);
                return true;
            }
            catch {
                return false;
            }
        }));
    }
}
export class AppletResolveMessage extends AppletMessage {
    constructor({ id }) {
        super('resolve');
        this.id = id;
    }
}
export class AppletActionsMessage extends AppletMessage {
    constructor({ actions }) {
        super('actions');
        this.actions = actions;
    }
}
export class AppletDataMessage extends AppletMessage {
    constructor({ data }) {
        super('data');
        this.data = data;
    }
}
export class AppletReadyMessage extends AppletMessage {
    constructor() {
        super('ready');
    }
}
export class AppletResizeMessage extends AppletMessage {
    constructor({ dimensions, }) {
        super('resize');
        this.dimensions = dimensions;
    }
}
export class AppletActionMessage extends AppletMessage {
    constructor({ actionId, params }) {
        super('action');
        this.actionId = actionId;
        this.params = params;
    }
}
export class AppletInitMessage extends AppletMessage {
    constructor() {
        super('init');
    }
}
/* Events */
export class AppletDataEvent extends Event {
    constructor({ data }) {
        super('data', {
            bubbles: false,
            cancelable: false,
            composed: false,
        });
        this.data = data;
    }
}
export class AppletReadyEvent extends Event {
    constructor() {
        super('ready', {
            bubbles: false,
            cancelable: false,
            composed: false,
        });
    }
}
export class AppletLoadEvent extends Event {
    constructor() {
        super('load', {
            bubbles: false,
            cancelable: false,
            composed: false,
        });
    }
}
export class AppletActionsEvent extends Event {
    constructor({ actions }) {
        super('actions', {
            bubbles: false,
            cancelable: false,
            composed: false,
        });
        this.actions = actions;
    }
}
export class AppletResizeEvent extends Event {
    constructor({ dimensions }) {
        super('resize', {
            bubbles: false,
            cancelable: false,
            composed: false,
        });
        this.dimensions = dimensions;
    }
}

var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Applet_instances, _Applet_manifest, _Applet_data, _Applet_addListeners;
import { parseUrl } from '../utils';
import { AppletDataMessage, AppletInitMessage, AppletDataEvent, AppletResizeEvent, AppletActionsEvent, AppletMessageRelay, loadManifest, AppletReadyEvent, AppletActionMessage, } from './shared';
// Container for initializing applets without an explicit container
const hiddenContainer = document.createElement('iframe');
hiddenContainer.style.display = 'none';
document.body.appendChild(hiddenContainer);
// Options for loading an applet
// interface LoadOpts {
//   unsafe?: boolean;
// }
// const defaultOpts: LoadOpts = {
//   unsafe: false,
// };
// Load an applet object from a URL
export async function load(url, container
// opts?: LoadOpts
) {
    if (!container)
        container = hiddenContainer;
    url = parseUrl(url);
    const manifest = await loadManifest(url);
    // If unsafe enabled, allow same origin sandbox
    // This is required for e.g. YouTube embeds
    //   const _opts = Object.assign(defaultOpts, opts ?? {});
    // if (_opts.unsafe && manifest.unsafe) {
    //   container.setAttribute(
    //     'sandbox',
    //     'allow-scripts allow-forms allow-same-origin'
    //   );
    // } else {
    //   container.setAttribute('sandbox', 'allow-scripts allow-forms');
    // }
    container.setAttribute('sandbox', 'allow-scripts allow-forms');
    container.src = url;
    const applet = new Applet(manifest, container.contentWindow);
    return new Promise((resolve) => {
        applet.onready = () => resolve(applet);
    });
}
export class Applet extends EventTarget {
    constructor(manifest, targetWindow) {
        super();
        _Applet_instances.add(this);
        this.actions = [];
        _Applet_manifest.set(this, void 0);
        _Applet_data.set(this, void 0);
        this.messageRelay = new AppletMessageRelay(targetWindow);
        __classPrivateFieldSet(this, _Applet_manifest, manifest, "f");
        __classPrivateFieldGet(this, _Applet_instances, "m", _Applet_addListeners).call(this);
        this.messageRelay.on('ready', () => {
            this.messageRelay.send(new AppletInitMessage());
        });
    }
    async dispatchAction(actionId, params) {
        const actionMessage = new AppletActionMessage({
            actionId,
            params,
        });
        return await this.messageRelay.send(actionMessage);
    }
    get data() {
        return __classPrivateFieldGet(this, _Applet_data, "f");
    }
    set data(data) {
        __classPrivateFieldSet(this, _Applet_data, data, "f");
        this.messageRelay.send(new AppletDataMessage({ data }));
    }
    get manifest() {
        return __classPrivateFieldGet(this, _Applet_manifest, "f");
    }
    onready(event) { }
    onresize(event) { }
    onactions(event) { }
    ondata(event) { }
}
_Applet_manifest = new WeakMap(), _Applet_data = new WeakMap(), _Applet_instances = new WeakSet(), _Applet_addListeners = function _Applet_addListeners() {
    this.messageRelay.on('ready', (message) => {
        const readyEvent = new AppletReadyEvent();
        if (typeof this.onready === 'function')
            this.onready(readyEvent);
        this.dispatchEvent(readyEvent);
    });
    this.messageRelay.on('data', (message) => {
        __classPrivateFieldSet(this, _Applet_data, message.data, "f");
        const dataEvent = new AppletDataEvent({ data: message.data });
        if (typeof this.ondata === 'function')
            this.ondata(dataEvent);
        this.dispatchEvent(dataEvent);
    });
    this.messageRelay.on('resize', (message) => {
        const resizeEvent = new AppletResizeEvent({
            dimensions: message.dimensions,
        });
        if (typeof this.onresize === 'function')
            this.onresize(resizeEvent);
        this.dispatchEvent(resizeEvent);
    });
    this.messageRelay.on('actions', (message) => {
        this.actions = message.actions;
        const actionsEvent = new AppletActionsEvent({ actions: message.actions });
        if (typeof this.onactions === 'function')
            this.onactions(actionsEvent);
        this.dispatchEvent(actionsEvent);
    });
};

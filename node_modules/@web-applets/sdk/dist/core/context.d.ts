import { ActionParams, AppletDataEvent, AppletLoadEvent, AppletReadyEvent, JSONSchemaProperties, AppletManifest, AppletAction, AppletMessageRelay } from './shared';
export type ActionHandler<T extends ActionParams> = (params: T) => void | Promise<void>;
export type ActionHandlerDict = {
    [key: string]: ActionHandler<any>;
};
export declare class AppletContext extends EventTarget {
    #private;
    messageRelay: AppletMessageRelay;
    actionHandlers: ActionHandlerDict;
    manifest: AppletManifest;
    constructor();
    connect(): void;
    initialize(): Promise<void>;
    createResizeObserver(): void;
    attachListeners(): void;
    setActionHandler<T = ActionParams>(actionId: string, handler: ActionHandler<T>): void;
    defineAction<T = ActionParams>(actionId: string, definition: ActionDefinition<T>): void;
    set actions(actions: AppletAction[]);
    get actions(): AppletAction[];
    set data(data: any);
    get data(): any;
    setData(data: any): Promise<void>;
    onload(event: AppletLoadEvent): Promise<void> | void;
    onready(event: AppletReadyEvent): void;
    ondata(event: AppletDataEvent): void;
}
interface ActionDefinition<T> extends Omit<AppletAction, 'id'> {
    params?: JSONSchemaProperties;
    handler?: ActionHandler<T>;
}
export declare function getContext(): AppletContext;
export {};

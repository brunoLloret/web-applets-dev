import { AppletAction, AppletMessage, ActionParams, AppletManifest, AppletDataEvent, AppletResizeEvent, AppletActionsEvent, AppletMessageRelay } from './shared';
interface LoadOpts {
    unsafe?: boolean;
}
declare function load(url: string, container?: HTMLIFrameElement, opts?: LoadOpts): Promise<Applet>;
interface AppletOptions {
    manifest: AppletManifest;
    container: HTMLIFrameElement;
}
declare class Applet<T = any> extends EventTarget {
    #private;
    messageRelay: AppletMessageRelay;
    url: string;
    actions: AppletAction[];
    container: HTMLIFrameElement;
    type: string;
    constructor(options: AppletOptions);
    initializeListeners(): void;
    get data(): T;
    set data(data: T);
    get manifest(): AppletManifest;
    onresize(event: AppletResizeEvent): void;
    onactions(event: AppletActionsEvent): void;
    ondata(event: AppletDataEvent): void;
    disconnect(): void;
    dispatchAction(actionId: string, params: ActionParams): Promise<AppletMessage>;
}
export declare const applets: {
    load: typeof load;
};
export { Applet };

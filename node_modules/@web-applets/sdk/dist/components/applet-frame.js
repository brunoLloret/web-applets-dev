var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AppletFrame_root, _AppletFrame_src;
import { applets, } from '../index';
// TODO: Add resize event handler, and resize DOM element
export class AppletFrame extends HTMLElement {
    constructor() {
        super(...arguments);
        _AppletFrame_root.set(this, void 0);
        _AppletFrame_src.set(this, void 0);
    }
    connectedCallback() {
        __classPrivateFieldSet(this, _AppletFrame_root, this.attachShadow({ mode: 'open' }), "f");
        this.container = document.createElement('iframe');
        __classPrivateFieldGet(this, _AppletFrame_root, "f").appendChild(this.container);
        const styles = document.createElement('style');
        styles.textContent = this.styles;
        __classPrivateFieldGet(this, _AppletFrame_root, "f").appendChild(styles);
        const url = this.getAttribute('src');
        if (url)
            this.loadApplet(url);
    }
    set src(value) {
        __classPrivateFieldSet(this, _AppletFrame_src, value, "f");
        this.loadApplet(value);
    }
    get src() {
        return __classPrivateFieldGet(this, _AppletFrame_src, "f");
    }
    attributeChangedCallback(name, oldValue, newValue) {
        if (name === 'src') {
            this.src = newValue;
        }
    }
    async loadApplet(url) {
        if (!this.container)
            return;
        this.applet = await applets.load(url, this.container);
        // When data received, bubble the event up
        this.applet.ondata = (dataEvent) => {
            this.dispatchEvent(dataEvent);
        };
        // Resize
        this.applet.onresize = (resizeEvent) => {
            this.resizeContainer(resizeEvent.dimensions);
        };
        this.applet.onactions = (e) => { };
        // Emit a load event when loading complete
        this.dispatchEvent(new Event('load'));
        this.loaded = true;
    }
    set data(data) {
        if (this.applet && this.loaded) {
            this.applet.data = data;
        }
        else {
            const loadListener = () => {
                this.applet.data = data;
                this.removeEventListener('load', loadListener);
            };
            this.addEventListener('load', loadListener);
        }
    }
    resizeContainer(dimensions) {
        this.container.style.height = `${dimensions.height + 2}px`;
    }
    get styles() {
        return /*css*/ `
      :host {
        display: flex;
        flex-direction: column;
      }

      iframe {
        border: none;
        height: 100%;
        width: 100%;
      }
    `;
    }
}
_AppletFrame_root = new WeakMap(), _AppletFrame_src = new WeakMap();
AppletFrame.observedAttributes = ['src'];
customElements.define('applet-frame', AppletFrame);
